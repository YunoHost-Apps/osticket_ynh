#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_print_info --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
admin=$(ynh_app_setting_get --app=$app --key=admin)
is_public=$(ynh_app_setting_get --app=$app --key=is_public)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)
language=$(ynh_app_setting_get --app=$app --key=language)
db_name=$(ynh_app_setting_get --app=$app --key=db_name)
phpversion=$(ynh_app_setting_get --app=$app --key=phpversion)

config_file=$final_path/include/ost-config.php

#=================================================
# CHECK VERSION
#=================================================
ynh_print_info --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_print_info --message="Ensuring downward compatibility..."

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set --app=$app --key=is_public --value=0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z "$db_name" ]; then
	db_name=$(ynh_sanitize_dbid --db_name=$app)
	ynh_app_setting_set --app=$app --key=db_name --value=$db_name
fi

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_print_info --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_print_info --message="Upgrading source files..."

	tmpdir="$(mktemp -d)"

	mkdir $tmpdir/plugins
	rsync -a "$final_path/include/plugins" "$tmpdir/."
	rsync -a "$config_file" "$tmpdir/."
	ynh_secure_remove --file="$final_path"

	# Download, check integrity, uncompress and patch the source from app.src
	ynh_setup_source --dest_dir="$final_path"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build" --source_id="core-plugins"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/archiver" --source_id="plugin-archiver"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/attachment_preview" --source_id="plugin-attachment_preview"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/autocloser" --source_id="plugin-autocloser"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/fetch-note" --source_id="plugin-fetch-note"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/field-radiobuttons" --source_id="plugin-field-radiobuttons"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/fwd-rewriter" --source_id="plugin-fwd-rewriter"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/mattermost" --source_id="plugin-mattermost"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/mentioner" --source_id="plugin-mentioner"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/microsoft-teams" --source_id="plugin-microsoft-teams"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/slack" --source_id="plugin-slack"
	ynh_setup_source --dest_dir="$final_path/include/plugins/build/preventautoscroll" --source_id="plugin-preventautoscroll"

	rsync -a "$tmpdir/plugins" "$final_path/include/."
	rsync -a "$tmpdir/ost-config.php" "$final_path/include/."
	ynh_secure_remove --file="$tmpdir"
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_print_info --message="Upgrading NGINX web server configuration..."

# Create a dedicated NGINX config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_print_info --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_print_info --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app

#=================================================
# PHP-FPM CONFIGURATION
#=================================================
ynh_print_info --message="Upgrading PHP-FPM configuration..."

# Create a dedicated PHP-FPM config
ynh_add_fpm_config --phpversion=$YNH_PHP_VERSION

#=================================================
# SPECIFIC UPGRADE
#=================================================
# BUILD PLUGINS
#=================================================
ynh_print_info --message="Building plugins..."

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	mkdir -p "$final_path/include/plugins/build/.config/composer"
	COMPOSER_HOME="$final_path/include/plugins/build/.config/composer"
	pushd "$final_path/include/plugins/build"
		php$phpversion make.php hydrate
		php$phpversion -dphar.readonly=0 make.php build auth-cas
		php$phpversion -dphar.readonly=0 make.php build auth-ldap
		php$phpversion -dphar.readonly=0 make.php build auth-oauth
		php$phpversion -dphar.readonly=0 make.php build auth-passthru
		php$phpversion -dphar.readonly=0 make.php build storage-fs
		php$phpversion -dphar.readonly=0 make.php build storage-s3
		php$phpversion -dphar.readonly=0 make.php build archiver
		php$phpversion -dphar.readonly=0 make.php build attachment_preview
		php$phpversion -dphar.readonly=0 make.php build autocloser
		php$phpversion -dphar.readonly=0 make.php build fetch-note
		php$phpversion -dphar.readonly=0 make.php build field-radiobuttons
		php$phpversion -dphar.readonly=0 make.php build fwd-rewriter
		php$phpversion -dphar.readonly=0 make.php build mattermost
		php$phpversion -dphar.readonly=0 make.php build mentioner
		php$phpversion -dphar.readonly=0 make.php build microsoft-teams
		php$phpversion -dphar.readonly=0 make.php build slack
		php$phpversion -dphar.readonly=0 make.php build preventautoscroll
		cp -f *.phar $final_path/include/plugins/.
	popd
	ynh_secure_remove --file="$final_path/include/plugins/build"
fi

#=================================================
# UPGRADE LANGUAGE
#=================================================
ynh_print_info --message="UPGRADING language..."

rsync -a "../conf/i18n" "$final_path/include/."

#=================================================
# FINALIZE UPGRADE
#=================================================
ynh_print_info --message="Finalizing install..."

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	# Removing setup folder
	ynh_secure_remove --file="$final_path/setup"

	# Securing config file
	chmod 0644 $config_file
fi

#=================================================
# SET THE CRON FILE
#=================================================
ynh_print_info --message="Setting the cron file..."

cp -f ../conf/cron /etc/cron.d/$app

ynh_replace_string --match_string="__FINALPATH__" --replace_string="$final_path" --target_file="/etc/cron.d/$app"
ynh_replace_string --match_string="__PHPVERSION__" --replace_string="$phpversion" --target_file="/etc/cron.d/$app"

#=================================================
# STORE THE CONFIG FILE CHECKSUM
#=================================================
ynh_print_info --message="Storing the config file checksum..."

ynh_backup_if_checksum_is_different --file="$config_file"
# Recalculate and store the checksum of the file for the next upgrade.
ynh_store_file_checksum --file="$config_file"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_print_info --message="Securing files and directories..."

# Set permissions on app files
chown -R $app: $final_path

#=================================================
# SETUP SSOWAT
#=================================================
ynh_print_info --message="Upgrading SSOwat configuration..."

# Make app public if necessary
if [ $is_public -eq 1 ]
then
	# unprotected_uris allows SSO credentials to be passed anyway
	ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"
fi

#=================================================
# RELOAD NGINX
#=================================================
ynh_print_info --message="Reloading NGINX web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_print_info --message="Upgrade of $app completed"
